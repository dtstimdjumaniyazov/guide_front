// src/pages/EditSubmissionPage.tsx
import React, { useState, useEffect } from 'react'
import { useParams, useNavigate, Link } from 'react-router-dom'
import { 
  useGetSubmissionQuery, 
  useUpdateSubmissionDataMutation,
  useGetInstitutionTypesQuery,
  useUploadSubmissionMediaMutation
} from '../../store/api/institutionsApi'
import { useAuth } from '../../providers/AuthProvider'
import { validators } from '../../hooks/validators'
import { LoadingPage, LoadingSpinner } from '../../components/Loading'
import type { InstitutionSubmissionData } from '../../types'
import { useDocumentTitle } from '../../hooks/useDocumentTitle'
import { MediaUpload } from '../../components/MediaUpload'
import type { MediaFile } from '../../components/MediaUpload'

interface FormErrors {
  [key: string]: string | undefined
  media_upload?: string
}

const EditSubmissionPage: React.FC = () => {
  useDocumentTitle('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏')

  const { id } = useParams<{ id: string }>()
  const navigate = useNavigate()
  const { user } = useAuth()
  
  const { data: submission, isLoading: loadingSubmission, error } = useGetSubmissionQuery(Number(id), {
    skip: !id
  })
  
  const [updateSubmissionData, { isLoading: isSubmitting }] = useUpdateSubmissionDataMutation()
  const { data: institutionTypes, isLoading: typesLoading } = useGetInstitutionTypesQuery()
  const [uploadSubmissionMedia] = useUploadSubmissionMediaMutation()
  
  const [formData, setFormData] = useState<InstitutionSubmissionData>({
    name: '',
    description: '',
    address: '',
    contact_phone: '',
    website: '',
    social_links: {
      instagram: '',
      facebook: '',
      telegram: '',
    },
    age_group: '',
    price_range: '',
    services: [],
    schedule: '',
    latitude: 0,
    longitude: 0,
    institution_type: 0,
    media_files: [],
  })

  const [errors, setErrors] = useState<FormErrors>({})
  const [currentStep, setCurrentStep] = useState(1)
  const [serviceInput, setServiceInput] = useState('')

  // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ –∑–∞—è–≤–∫–∏
  useEffect(() => {
    if (submission?.institution_data) {
      const data = submission.institution_data

      // –û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã
      const baseFormData = {
        name: data.name || '',
        institution_type: data.institution_type || 0,
        description: data.description || '',
        address: data.address || '',
        contact_phone: data.contact_phone || '',
        website: data.website || '',
        social_links: {
          instagram: data.social_links?.instagram || '',
          facebook: data.social_links?.facebook || '',
          telegram: data.social_links?.telegram || '',
        },
        age_group: data.age_group || '',
        price_range: data.price_range || '',
        services: data.services || [],
        schedule: data.schedule || '',
        latitude: data.latitude || 0,
        longitude: data.longitude || 0,
      }

      // –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤
      let existingMediaFiles: MediaFile[] = []
      
      if (data.media_files && Array.isArray(data.media_files)) {
        existingMediaFiles = data.media_files
          .filter((mediaFile: any) => {
            // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ñ–∞–π–ª—ã (—Å file_url), –∏—Å–∫–ª—é—á–∞–µ–º File –æ–±—ä–µ–∫—Ç—ã
            return mediaFile.file_url && typeof mediaFile.file_url === 'string'
          })
          .map((mediaFile: any, index: number) => {
            // console.log(`–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞ ${index}:`, mediaFile)
            
            // –î–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ñ–∞–π–ª–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º file_url
            const fileUrl = mediaFile.file_url
            
            // –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π URL (–¥–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–π URL —Å–µ—Ä–≤–µ—Ä–∞)
            const baseUrl = import.meta.env.VITE_BASE_URL
            const fullUrl = fileUrl.startsWith('http') ? fileUrl : `${baseUrl}${fileUrl}`
            
            const processedFile = {
              file: fullUrl, // –ü–æ–ª–Ω—ã–π URL —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ñ–∞–π–ª–∞
              preview: fullUrl, // –ü—Ä–µ–≤—å—é - —Ç–æ—Ç –∂–µ URL
              caption: mediaFile.caption || '',
              media_type: mediaFile.media_type || 'photo',
              order: mediaFile.order !== undefined ? mediaFile.order : index,
              id: mediaFile.id, // ID —Ñ–∞–π–ª–∞ –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
              // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
              file_name: mediaFile.file_name,
              file_size: mediaFile.file_size,
              uploaded_at: mediaFile.uploaded_at,
              // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π URL
              originalUrl: fileUrl,
              isExisting: true // –§–ª–∞–≥ —á—Ç–æ —ç—Ç–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª
            }
            return processedFile
          })
      }
      
      setFormData({
        ...baseFormData,
        media_files: existingMediaFiles
      })
    }
  }, [submission])

  const steps = [
    { id: 1, name: '–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', icon: 'üè´' },
    { id: 2, name: '–ö–æ–Ω—Ç–∞–∫—Ç—ã –∏ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ', icon: 'üìç' },
    { id: 3, name: '–£—Å–ª—É–≥–∏, —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏ –º–µ–¥–∏–∞', icon: 'üìã' },
    { id: 4, name: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞', icon: '‚úÖ' }
  ]

  const handleInputChange = (field: keyof InstitutionSubmissionData, value: any) => {
    setFormData(prev => ({ ...prev, [field]: value }))
    
    // –û—á–∏—â–∞–µ–º –æ—à–∏–±–∫—É –¥–ª—è –ø–æ–ª—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏
    if (errors[field]) {
      setErrors(prev => {
        const newErrors = { ...prev }
        delete newErrors[field]
        return newErrors
      })
    }
  }

  const handleSocialLinkChange = (platform: string, value: string) => {
    setFormData(prev => ({
      ...prev,
      social_links: {
        ...prev.social_links,
        [platform]: value
      }
    }))
  }

  const handleMediaChange = (files: MediaFile[]) => {
    
    const validatedFiles = files.map((file, index) => {
      let media_type: 'photo' | 'video' = 'photo'
      
      // –î–ª—è –Ω–æ–≤—ã—Ö File –æ–±—ä–µ–∫—Ç–æ–≤
      if (typeof file.file !== 'string' && file.file instanceof File) {
        if (file.file.type.startsWith('video/')) {
          media_type = 'video'
        }
      } 
      // –î–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö URL —Ñ–∞–π–ª–æ–≤
      else if (typeof file.file === 'string') {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –≤ URL
        const url = file.file.toLowerCase()
        const extension = url.split('.').pop()?.split('?')[0] // –£–±–∏—Ä–∞–µ–º query –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        
        if (extension && ['mp4', 'avi', 'mov', 'wmv', 'flv', 'webm'].includes(extension)) {
          media_type = 'video'
        }
        
        // –ï—Å–ª–∏ —Ç–∏–ø —É–∂–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –≤ –¥–∞–Ω–Ω—ã—Ö, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
        if (file.media_type) {
          media_type = file.media_type
        }
      }
      
      return {
        ...file,
        order: file.order ?? index,
        caption: file.caption ?? '',
        media_type: file.media_type ?? media_type
      }
    })
    
    setFormData(prev => ({ ...prev, media_files: validatedFiles }))

    // –û—á–∏—â–∞–µ–º –æ—à–∏–±–∫—É –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–æ–≤
    if (errors.media_upload) {
      setErrors(prev => {
        const newErrors = { ...prev }
        delete newErrors.media_upload
        return newErrors
      })
    }
  }


  const addService = () => {
    if (serviceInput.trim() && !formData.services.includes(serviceInput.trim())) {
      setFormData(prev => ({
        ...prev,
        services: [...prev.services, serviceInput.trim()]
      }))
      setServiceInput('')
    }
  }

  const removeService = (index: number) => {
    setFormData(prev => ({
      ...prev,
      services: prev.services.filter((_, i) => i !== index)
    }))
  }

  const validateStep = (step: number): boolean => {
    const newErrors: FormErrors = {}

    switch (step) {
      case 1:
        if (!formData.name.trim()) newErrors.name = '–ù–∞–∑–≤–∞–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ'
        if (!formData.description.trim()) newErrors.description = '–û–ø–∏—Å–∞–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ'
        if (formData.description.length < 50) newErrors.description = '–û–ø–∏—Å–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 50 —Å–∏–º–≤–æ–ª–æ–≤'
        if (!formData.age_group.trim()) newErrors.age_group = '–í–æ–∑—Ä–∞—Å—Ç–Ω–∞—è –≥—Ä—É–ø–ø–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞'
        if (!formData.price_range.trim()) newErrors.price_range = '–¶–µ–Ω–æ–≤–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω'
        if (!formData.institution_type || formData.institution_type === 0) {
          newErrors.institution_type = '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —É—á—Ä–µ–∂–¥–µ–Ω–∏—è'
        }
        break

      case 2:
        if (!formData.address.trim()) newErrors.address = '–ê–¥—Ä–µ—Å –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω'
        if (!formData.contact_phone.trim()) {
          newErrors.contact_phone = '–¢–µ–ª–µ—Ñ–æ–Ω –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω'
        } else if (!validators.isValidPhone(formData.contact_phone)) {
          newErrors.contact_phone = '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞'
        }
        if (formData.website && !validators.isValidUrl(formData.website)) {
          newErrors.website = '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL —Å–∞–π—Ç–∞'
        }
        if (formData.latitude === 0 || formData.longitude === 0) {
          newErrors.coordinates = '–£–∫–∞–∂–∏—Ç–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ –∫–∞—Ä—Ç–µ'
        }
        break

      case 3:
        if (!formData.schedule.trim()) newErrors.schedule = '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ'
        if (formData.services.length === 0) newErrors.services = '–î–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —É—Å–ª—É–≥—É'
        break
    }

    setErrors(newErrors)
    return Object.keys(newErrors).length === 0
  }

  const handleNext = () => {
    if (validateStep(currentStep)) {
      setCurrentStep(prev => Math.min(prev + 1, 4))
      window.scrollTo({ top: 0, behavior: 'smooth' })
    }
  }

  const handlePrev = () => {
    setCurrentStep(prev => Math.max(prev - 1, 1))
    window.scrollTo({ top: 0, behavior: 'smooth' })
  }

  const handleSubmit = async () => {
    if (!validateStep(3)) return

    try {
      // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏ (–±–µ–∑ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤)
      const response = await updateSubmissionData({
        id: Number(id),
        data: {
          institution_data: {
            name: formData.name,
            description: formData.description,
            address: formData.address,
            contact_phone: formData.contact_phone,
            website: formData.website,
            social_links: formData.social_links,
            age_group: formData.age_group,
            price_range: formData.price_range,
            services: formData.services,
            schedule: formData.schedule,
            institution_type: formData.institution_type,
            latitude: formData.latitude,
            longitude: formData.longitude,
            // –ù–ï –≤–∫–ª—é—á–∞–µ–º media_files –≤ –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
          }
        }
      }).unwrap()

      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–ª—å–∫–æ –ù–û–í–´–ï –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã (File –æ–±—ä–µ–∫—Ç—ã, –Ω–µ —Å—Ç—Ä–æ–∫–∏)
      if (formData.media_files && formData.media_files.length > 0) {
        try {
          const newFileObjects = formData.media_files
            .filter(mediaFile => mediaFile.file instanceof File) // –¢–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ File –æ–±—ä–µ–∫—Ç—ã
            .map(mediaFile => mediaFile.file as File)
                    
          if (newFileObjects.length > 0) {
            const captions = formData.media_files
              .filter(mediaFile => mediaFile.file instanceof File)
              .map(mediaFile => mediaFile.caption || '')
            
            const orders = formData.media_files
              .filter(mediaFile => mediaFile.file instanceof File)
              .map((mediaFile, index) => mediaFile.order ?? index)
            
            const media_types = formData.media_files
              .filter(mediaFile => mediaFile.file instanceof File)
              .map(mediaFile => mediaFile.media_type || 'photo')

            await uploadSubmissionMedia({
              submission_id: Number(id),
              files: newFileObjects,
              captions,
              orders,
              media_types
            }).unwrap()
          }
        } catch (uploadError: any) {
          console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤:', uploadError)
          
          setErrors({
            media_upload: `–ó–∞—è–≤–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞, –Ω–æ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–æ–≤—ã—Ö –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤: ${uploadError.data?.error || uploadError.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`
          })
          
          setTimeout(() => {
            navigate('/my-submissions', {
              state: {
                message: '–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞! –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –Ω–æ–≤—ã–µ –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã –º–æ–≥–ª–∏ –Ω–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å—Å—è.',
                submissionId: response.submission_id
              }
            })
          }, 2000)
          return
        }
      }

      // –£—Å–ø–µ—à–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
      navigate('/my-submissions', {
        state: {
          message: '–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ!',
          submissionId: response.submission_id
        }
      })
    } catch (error: any) {
      console.error('Submit error:', error)
      
      let errorMessage = '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏'
      
      if (error.status === 404) {
        errorMessage = '–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è'
      } else if (error.status === 400) {
        errorMessage = error.data?.error || '–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞'
      } else if (error.data?.error) {
        errorMessage = error.data.error
      } else if (error.data?.details) {
        errorMessage = `–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: ${JSON.stringify(error.data.details)}`
      } else if (error.data?.message) {
        errorMessage = error.data.message
      } else if (error.message) {
        errorMessage = error.message
      }
      
      setErrors({ submit: errorMessage })
    }
  }

  const getLocationFromAddress = async () => {
    if (!formData.address) return

    try {
      // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≥–µ–æ–∫–æ–¥–∏–Ω–≥ API (–Ω–∞–ø—Ä–∏–º–µ—Ä, Google Geocoding)
      // –î–ª—è –ø—Ä–∏–º–µ—Ä–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É
      const mockCoords = {
        lat: 41.2995 + (Math.random() - 0.5) * 0.1, // –ü—Ä–∏–º–µ—Ä–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¢–∞—à–∫–µ–Ω—Ç–∞
        lng: 69.2401 + (Math.random() - 0.5) * 0.1
      }
      
      setFormData(prev => ({
        ...prev,
        latitude: mockCoords.lat,
        longitude: mockCoords.lng
      }))

      // –û—á–∏—â–∞–µ–º –æ—à–∏–±–∫—É –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
      if (errors.coordinates) {
        setErrors(prev => {
          const newErrors = { ...prev }
          delete newErrors.coordinates
          return newErrors
        })
      }
    } catch (error) {
      console.error('Geocoding error:', error)
    }
  }

  if (loadingSubmission) {
    return <LoadingPage message="–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞—è–≤–∫–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è..." />
  }

  if (error || !submission) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-center">
          <div className="text-6xl mb-4">üòï</div>
          <h1 className="text-2xl font-bold text-gray-900 mb-4">
            –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
          </h1>
          <p className="text-gray-600 mb-6">
            –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º–∞—è –∑–∞—è–≤–∫–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞.
          </p>
          <Link
            to="/my-submissions"
            className="inline-flex items-center px-6 py-3 bg-blue-600 hover:bg-blue-700 text-white rounded-lg transition-colors duration-200"
          >
            ‚Üê –ö –º–æ–∏–º –∑–∞—è–≤–∫–∞–º
          </Link>
        </div>
      </div>
    )
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
  if (submission.user_email !== user?.email) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-center">
          <div className="text-6xl mb-4">üö´</div>
          <h1 className="text-2xl font-bold text-gray-900 mb-4">
            –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω
          </h1>
          <p className="text-gray-600 mb-6">
            –í—ã –º–æ–∂–µ—Ç–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ –∑–∞—è–≤–∫–∏.
          </p>
          <Link
            to="/my-submissions"
            className="inline-flex items-center px-6 py-3 bg-blue-600 hover:bg-blue-700 text-white rounded-lg transition-colors duration-200"
          >
            ‚Üê –ö –º–æ–∏–º –∑–∞—è–≤–∫–∞–º
          </Link>
        </div>
      </div>
    )
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏
  if (submission.status !== 'needs_edit') {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-center">
          <div className="text-6xl mb-4">üìã</div>
          <h1 className="text-2xl font-bold text-gray-900 mb-4">
            –ó–∞—è–≤–∫–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
          </h1>
          <p className="text-gray-600 mb-6">
            –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –∑–∞—è–≤–∫–∏ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º "–¢—Ä–µ–±—É–µ—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏".
            <br />
            –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: <strong>{
              submission.status === 'pending' ? '–ù–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏' :
              submission.status === 'approved' ? '–û–¥–æ–±—Ä–µ–Ω–æ' :
              submission.status === 'rejected' ? '–û—Ç–∫–ª–æ–Ω–µ–Ω–æ' : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
            }</strong>
          </p>
          <Link
            to={`/my-submissions/${submission.id}`}
            className="inline-flex items-center px-6 py-3 bg-blue-600 hover:bg-blue-700 text-white rounded-lg transition-colors duration-200"
          >
            –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞—è–≤–∫—É
          </Link>
        </div>
      </div>
    )
  }

  const renderStep = () => {
    switch (currentStep) {
      case 1:
        return (
          <div className="space-y-6">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                –ù–∞–∑–≤–∞–Ω–∏–µ —É—á—Ä–µ–∂–¥–µ–Ω–∏—è *
              </label>
              <input
                type="text"
                value={formData.name}
                onChange={(e) => handleInputChange('name', e.target.value)}
                className={`w-full px-4 py-3 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${
                  errors.name ? 'border-red-300' : 'border-gray-300'
                }`}
                placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –î–µ—Ç—Å–∫–∏–π —Å–∞–¥ '–°–æ–ª–Ω—ã—à–∫–æ'"
              />
              {errors.name && <p className="mt-1 text-sm text-red-600">{errors.name}</p>}
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                –¢–∏–ø —É—á—Ä–µ–∂–¥–µ–Ω–∏—è *
              </label>
              {typesLoading ? (
                <div className="w-full px-4 py-3 border border-gray-300 rounded-lg bg-gray-50">
                  –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–∏–ø–æ–≤...
                </div>
              ) : (
                <select
                  value={formData.institution_type || 0}
                  onChange={(e) => handleInputChange('institution_type', parseInt(e.target.value))}
                  className={`w-full px-4 py-3 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${
                    errors.institution_type ? 'border-red-300' : 'border-gray-300'
                  }`}
                >
                  <option value={0}>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —É—á—Ä–µ–∂–¥–µ–Ω–∏—è</option>
                  {institutionTypes?.map((type) => (
                    <option key={type.id} value={type.id}>
                      {type.name}
                    </option>
                  ))}
                </select>
              )}
              {errors.institution_type && <p className="mt-1 text-sm text-red-600">{errors.institution_type}</p>}
              {institutionTypes && formData?.institution_type !== undefined && formData?.institution_type > 0 && (
                <p className="mt-1 text-sm text-gray-500">
                  {institutionTypes.find(t => t.id === formData.institution_type)?.description}
                </p>
              )}
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                –û–ø–∏—Å–∞–Ω–∏–µ —É—á—Ä–µ–∂–¥–µ–Ω–∏—è *
              </label>
              <textarea
                value={formData.description}
                onChange={(e) => handleInputChange('description', e.target.value)}
                rows={6}
                className={`w-full px-4 py-3 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${
                  errors.description ? 'border-red-300' : 'border-gray-300'
                }`}
                placeholder="–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–æ –æ–± —É—á—Ä–µ–∂–¥–µ–Ω–∏–∏, –µ–≥–æ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç—è—Ö, –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞—Ö, –º–µ—Ç–æ–¥–∏–∫–∞—Ö –æ–±—É—á–µ–Ω–∏—è..."
              />
              <div className="mt-1 flex justify-between text-sm text-gray-500">
                <span>{formData.description.length} —Å–∏–º–≤–æ–ª–æ–≤ (–º–∏–Ω–∏–º—É–º 50)</span>
                {errors.description && <span className="text-red-600">{errors.description}</span>}
              </div>
            </div>

            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  –í–æ–∑—Ä–∞—Å—Ç–Ω–∞—è –≥—Ä—É–ø–ø–∞ *
                </label>
                <input
                  type="text"
                  value={formData.age_group}
                  onChange={(e) => handleInputChange('age_group', e.target.value)}
                  className={`w-full px-4 py-3 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${
                    errors.age_group ? 'border-red-300' : 'border-gray-300'
                  }`}
                  placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: 3-6 –ª–µ—Ç, –æ—Ç 2 –ª–µ—Ç, —à–∫–æ–ª—å–Ω–∏–∫–∏"
                />
                {errors.age_group && <p className="mt-1 text-sm text-red-600">{errors.age_group}</p>}
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  –¶–µ–Ω–æ–≤–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω *
                </label>
                <input
                  type="text"
                  value={formData.price_range}
                  onChange={(e) => handleInputChange('price_range', e.target.value)}
                  className={`w-full px-4 py-3 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${
                    errors.price_range ? 'border-red-300' : 'border-gray-300'
                  }`}
                  placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: 500,000 - 800,000 —Å—É–º/–º–µ—Å—è—Ü"
                />
                {errors.price_range && <p className="mt-1 text-sm text-red-600">{errors.price_range}</p>}
              </div>
            </div>
          </div>
        )

      case 2:
        return (
          <div className="space-y-6">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                –ê–¥—Ä–µ—Å *
              </label>
              <textarea
                value={formData.address}
                onChange={(e) => handleInputChange('address', e.target.value)}
                rows={3}
                className={`w-full px-4 py-3 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${
                  errors.address ? 'border-red-300' : 'border-gray-300'
                }`}
                placeholder="–ü–æ–ª–Ω—ã–π –∞–¥—Ä–µ—Å —É—á—Ä–µ–∂–¥–µ–Ω–∏—è"
              />
              {errors.address && <p className="mt-1 text-sm text-red-600">{errors.address}</p>}
            </div>

            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  –ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω *
                </label>
                <input
                  type="tel"
                  value={formData.contact_phone}
                  onChange={(e) => handleInputChange('contact_phone', e.target.value)}
                  className={`w-full px-4 py-3 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${
                    errors.contact_phone ? 'border-red-300' : 'border-gray-300'
                  }`}
                  placeholder="+998 90 123 45 67"
                />
                {errors.contact_phone && <p className="mt-1 text-sm text-red-600">{errors.contact_phone}</p>}
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  –í–µ–±-—Å–∞–π—Ç
                </label>
                <input
                  type="url"
                  value={formData.website}
                  onChange={(e) => handleInputChange('website', e.target.value)}
                  className={`w-full px-4 py-3 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${
                    errors.website ? 'border-red-300' : 'border-gray-300'
                  }`}
                  placeholder="https://example.com"
                />
                {errors.website && <p className="mt-1 text-sm text-red-600">{errors.website}</p>}
              </div>
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏
              </label>
              <div className="space-y-3">
                <div className="flex items-center space-x-3">
                  <span className="text-2xl">üì∏</span>
                  <input
                    type="url"
                    value={formData.social_links?.instagram || ''}
                    onChange={(e) => handleSocialLinkChange('instagram', e.target.value)}
                    className="flex-1 px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                    placeholder="Instagram: https://instagram.com/username"
                  />
                </div>
                <div className="flex items-center space-x-3">
                  <span className="text-2xl">üìò</span>
                  <input
                    type="url"
                    value={formData.social_links?.facebook || ''}
                    onChange={(e) => handleSocialLinkChange('facebook', e.target.value)}
                    className="flex-1 px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                    placeholder="Facebook: https://facebook.com/page"
                  />
                </div>
                <div className="flex items-center space-x-3">
                  <span className="text-2xl">üí¨</span>
                  <input
                    type="url"
                    value={formData.social_links?.telegram || ''}
                    onChange={(e) => handleSocialLinkChange('telegram', e.target.value)}
                    className="flex-1 px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                    placeholder="Telegram: https://t.me/channel"
                  />
                </div>
              </div>
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ *
              </label>
              <div className="bg-gray-50 border border-gray-300 rounded-lg p-4">
                <div className="flex justify-between items-center mb-3">
                  <p className="text-sm text-gray-600">
                    {formData.latitude && formData.longitude && formData.latitude !== 0 && formData.longitude !== 0
                      ? `–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: ${formData.latitude.toFixed(6)}, ${formData.longitude.toFixed(6)}`
                      : '–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ'
                    }
                  </p>
                  <button
                    type="button"
                    onClick={getLocationFromAddress}
                    className="px-3 py-1 text-sm bg-blue-600 hover:bg-blue-700 text-white rounded transition-colors"
                  >
                    –ü–æ–ª—É—á–∏—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
                  </button>
                </div>
                <div className="grid grid-cols-2 gap-4">
                  <div>
                    <label className="block text-xs font-medium text-gray-700 mb-1">
                      –®–∏—Ä–æ—Ç–∞
                    </label>
                    <input
                      type="number"
                      step="any"
                      value={formData.latitude || ''}
                      onChange={(e) => handleInputChange('latitude', parseFloat(e.target.value) || 0)}
                      className="w-full px-3 py-2 border border-gray-300 rounded focus:ring-1 focus:ring-blue-500"
                      placeholder="41.2995"
                    />
                  </div>
                  <div>
                    <label className="block text-xs font-medium text-gray-700 mb-1">
                      –î–æ–ª–≥–æ—Ç–∞
                    </label>
                    <input
                      type="number"
                      step="any"
                      value={formData.longitude || ''}
                      onChange={(e) => handleInputChange('longitude', parseFloat(e.target.value) || 0)}
                      className="w-full px-3 py-2 border border-gray-300 rounded focus:ring-1 focus:ring-blue-500"
                      placeholder="69.2401"
                    />
                  </div>
                </div>
                {errors.coordinates && <p className="mt-2 text-sm text-red-600">{errors.coordinates}</p>}
                <p className="text-xs text-gray-500 mt-2">
                  üí° –ù–∞–∂–º–∏—Ç–µ "–ü–æ–ª—É—á–∏—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã" –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ –∞–¥—Ä–µ—Å—É
                </p>
              </div>
            </div>
          </div>
        )

      case 3:
        return (
          <div className="space-y-6">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                –£—Å–ª—É–≥–∏ –∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã *
              </label>
              <div className="flex space-x-2 mb-3">
                <input
                  type="text"
                  value={serviceInput}
                  onChange={(e) => setServiceInput(e.target.value)}
                  onKeyPress={(e) => e.key === 'Enter' && (e.preventDefault(), addService())}
                  className="flex-1 px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                  placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ê–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫, –¢–∞–Ω—Ü—ã, –†–∏—Å–æ–≤–∞–Ω–∏–µ"
                />
                <button
                  type="button"
                  onClick={addService}
                  className="px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded-lg transition-colors"
                >
                  –î–æ–±–∞–≤–∏—Ç—å
                </button>
              </div>
              
              {formData.services.length > 0 && (
                <div className="flex flex-wrap gap-2 mb-3">
                  {formData.services.map((service, index) => (
                    <span
                      key={index}
                      className="inline-flex items-center px-3 py-1 rounded-full text-sm bg-green-100 text-green-800"
                    >
                      {service}
                      <button
                        type="button"
                        onClick={() => removeService(index)}
                        className="ml-2 text-green-600 hover:text-green-800"
                      >
                        √ó
                      </button>
                    </span>
                  ))}
                </div>
              )}
              
              {errors.services && <p className="text-sm text-red-600">{errors.services}</p>}
              
              <p className="text-xs text-gray-500">
                –î–æ–±–∞–≤—å—Ç–µ –≤—Å–µ —É—Å–ª—É–≥–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —É—á—Ä–µ–∂–¥–µ–Ω–∏–µ
              </p>
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã –∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ *
              </label>
              <textarea
                value={formData.schedule}
                onChange={(e) => handleInputChange('schedule', e.target.value)}
                rows={6}
                className={`w-full px-4 py-3 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${
                  errors.schedule ? 'border-red-300' : 'border-gray-300'
                }`}
                placeholder={`–ù–∞–ø—Ä–∏–º–µ—Ä:
–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ - –ü—è—Ç–Ω–∏—Ü–∞: 08:00 - 18:00
–°—É–±–±–æ—Ç–∞: 09:00 - 15:00
–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ: –≤—ã—Ö–æ–¥–Ω–æ–π

–ì—Ä—É–ø–ø–∞ 3-4 –≥–æ–¥–∞: 09:00 - 12:00
–ì—Ä—É–ø–ø–∞ 5-6 –ª–µ—Ç: 14:00 - 17:00`}
              />
              {errors.schedule && <p className="mt-1 text-sm text-red-600">{errors.schedule}</p>}
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∏ –≤–∏–¥–µ–æ
              </label>
              <p className="text-sm text-gray-600 mb-4">
                –î–æ–±–∞–≤—å—Ç–µ –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∏ –≤–∏–¥–µ–æ —É—á—Ä–µ–∂–¥–µ–Ω–∏—è. –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç —Ä–æ–¥–∏—Ç–µ–ª—è–º –ª—É—á—à–µ –ø–æ–Ω—è—Ç—å –∞—Ç–º–æ—Å—Ñ–µ—Ä—É –º–µ—Å—Ç–∞.
              </p>
              
              {/* –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤ */}
              {formData.media_files && formData.media_files.some(f => typeof f.file === 'string') && (
                <div className="mb-6">
                  <h4 className="text-sm font-medium text-gray-700 mb-3 flex items-center">
                    <svg className="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z" />
                    </svg>
                    –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã ({formData.media_files.filter(f => typeof f.file === 'string').length})
                  </h4>
                  <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-3 p-4 bg-gray-50 rounded-lg">
                    {formData.media_files
                      .filter(file => typeof file.file === 'string')
                      .map((file, index) => {
                        // console.log(`–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞ ${index}:`, file)
                        // console.log(`URL –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è: ${file.file}`)
                        
                        return (
                          <div key={file.id || index} className="relative group">
                            <div className="aspect-square bg-gray-100 rounded-lg overflow-hidden">
                              {file.media_type === 'photo' ? (
                                <img
                                  src={file.file as string}
                                  alt={file.caption || `–§–æ—Ç–æ ${index + 1}`}
                                  className="w-full h-full object-cover"
                                  onLoad={() => {
                                    console.log(`‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ: ${file.file}`)
                                  }}
                                  onError={(e) => {
                                    console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: ${file.file}`);
                                    console.error('–û—à–∏–±–∫–∞:', e);
                                    // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å placeholder –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                                    (e.target as HTMLImageElement).style.display = 'none'
                                  }}
                                />
                              ) : (
                                <video
                                  src={file.file as string}
                                  className="w-full h-full object-cover"
                                  muted
                                  preload="metadata"
                                  controls={false}
                                  onLoadedData={() => {
                                    console.log(`‚úÖ –í–∏–¥–µ–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ: ${file.file}`)
                                  }}
                                  onError={(e) => {
                                    console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ: ${file.file}`)
                                    console.error('–û—à–∏–±–∫–∞:', e)
                                  }}
                                />
                              )}
                              
                              {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞ */}
                              <div className="absolute bottom-2 left-2">
                                <span className="bg-black bg-opacity-70 text-white px-2 py-1 text-xs rounded">
                                  {file.media_type === 'photo' ? 'üì∏' : 'üé•'}
                                </span>
                              </div>
                              
                              {/* –ü–æ–¥–ø–∏—Å—å */}
                              {file.caption && (
                                <div className="absolute bottom-2 right-2">
                                  <span 
                                    className="bg-black bg-opacity-70 text-white px-2 py-1 text-xs rounded cursor-help" 
                                    title={file.caption}
                                  >
                                    üí¨
                                  </span>
                                </div>
                              )}
                              
                              {/* –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è */}
                              <button
                                type="button"
                                onClick={() => {
                                  console.log('–£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞:', file)
                                  const updatedFiles = formData.media_files?.filter(f => f !== file) || []
                                  console.log('–§–∞–π–ª—ã –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è:', updatedFiles)
                                  setFormData(prev => ({ ...prev, media_files: updatedFiles }))
                                }}
                                className="absolute top-2 right-2 bg-red-500 hover:bg-red-600 text-white rounded-full w-6 h-6 flex items-center justify-center text-xs opacity-0 group-hover:opacity-100 transition-opacity"
                                title="–£–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª"
                              >
                                √ó
                              </button>
                              
                              {/* Fallback –µ—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è */}
                              {!file.file && (
                                <div className="w-full h-full flex items-center justify-center text-gray-400">
                                  <div className="text-center">
                                    <div className="text-2xl mb-1">‚ùå</div>
                                    <div className="text-xs">–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω</div>
                                  </div>
                                </div>
                              )}
                            </div>
                            
                            {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–µ */}
                            <div className="mt-1 text-xs text-gray-500">
                              <div className="truncate" title={file.file_name || '–§–∞–π–ª'}>
                                {file.file_name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–∞–π–ª'}
                              </div>
                              {file.file_size && (
                                <div className="text-gray-400">
                                  {(file.file_size / 1024 / 1024).toFixed(1)} MB
                                </div>
                              )}
                              {/* URL –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ */}
                              <div className="text-gray-300 truncate text-xs" title={file.file as string}>
                                {(file.file as string)?.substring(0, 50)}...
                              </div>
                            </div>
                          </div>
                        )
                      })
                    }
                  </div>
                </div>
              )}
              
              {/* –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤ */}
              <div>
                <h4 className="text-sm font-medium text-gray-700 mb-3 flex items-center">
                  <svg className="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 4v16m8-8H4" />
                  </svg>
                  –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ —Ñ–∞–π–ª—ã
                </h4>
                <MediaUpload
                  mediaFiles={formData.media_files?.filter(f => f.file instanceof File) || []}
                  onMediaChange={(newFiles) => {
                    // –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ URL —Ñ–∞–π–ª—ã —Å –Ω–æ–≤—ã–º–∏ File –æ–±—ä–µ–∫—Ç–∞–º–∏
                    const existingUrlFiles = formData.media_files?.filter(f => typeof f.file === 'string') || []
                    const allFiles = [...existingUrlFiles, ...newFiles]
                    handleMediaChange(allFiles)
                  }}
                  maxFiles={10 - (formData.media_files?.filter(f => typeof f.file === 'string').length || 0)}
                  disabled={isSubmitting}
                  onError={(error: string) => {
                    setErrors(prev => ({ 
                      ...prev, 
                      media_upload: error 
                    }))
                  }}
                />
              </div>
              
              {/* –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—à–∏–±–∫–∏ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤ */}
              {errors.media_upload && (
                <div className="mt-3 bg-red-50 border border-red-200 rounded-lg p-3">
                  <div className="flex items-start">
                    <div className="flex-shrink-0">
                      <svg className="w-5 h-5 text-red-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                      </svg>
                    </div>
                    <div className="ml-3">
                      <p className="text-sm text-red-600">{errors.media_upload}</p>
                    </div>
                  </div>
                </div>
              )}
              
              {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ª–∏–º–∏—Ç–∞—Ö */}
              <div className="mt-3 text-xs text-gray-500">
                üí° –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: {formData.media_files?.length || 0}/10. 
                –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –µ—â—ë: {10 - (formData.media_files?.length || 0)} —Ñ–∞–π–ª–æ–≤
              </div>
            </div>
          </div>
        )

      case 4:
        return (
          <div className="space-y-6">
            {/* –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ */}
            <div className="bg-blue-50 border border-blue-200 rounded-lg p-6">
              <div className="flex items-start">
                <div className="flex-shrink-0">
                  <svg className="w-6 h-6 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M7 8h10M7 12h4m1 8l-4-4H5a2 2 0 01-2-2V6a2 2 0 012-2h14a2 2 0 012 2v8a2 2 0 01-2 2h-3l-4 4z" />
                  </svg>
                </div>
                <div className="ml-4">
                  <h3 className="text-lg font-semibold text-blue-900 mb-2">
                    –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
                  </h3>
                  <p className="text-blue-800">
                    {submission.moderator_comment}
                  </p>
                </div>
              </div>
            </div>

            {/* –ü–æ–ª–Ω–∞—è —Å–≤–æ–¥–∫–∞ –¥–∞–Ω–Ω—ã—Ö */}
            <div className="bg-white border border-gray-200 rounded-lg overflow-hidden">
              <div className="bg-gray-50 px-6 py-4 border-b border-gray-200">
                <h3 className="text-lg font-semibold text-gray-900 flex items-center">
                  <svg className="w-5 h-5 mr-2 text-gray-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2" />
                  </svg>
                  –°–≤–æ–¥–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —É—á—Ä–µ–∂–¥–µ–Ω–∏–∏
                </h3>
              </div>
              
              <div className="p-6 space-y-6">
                {/* –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
                <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
                  <div>
                    <h4 className="text-sm font-semibold text-gray-700 uppercase tracking-wide mb-3">
                      –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                    </h4>
                    <div className="space-y-3">
                      <div>
                        <span className="text-sm font-medium text-gray-500">–ù–∞–∑–≤–∞–Ω–∏–µ:</span>
                        <p className="text-gray-900 font-medium">{formData.name || '‚Äî'}</p>
                      </div>
                      <div>
                        <span className="text-sm font-medium text-gray-500">–¢–∏–ø —É—á—Ä–µ–∂–¥–µ–Ω–∏—è:</span>
                        <p className="text-gray-900">
                          {formData.institution_type && institutionTypes
                            ? institutionTypes.find(t => t.id === formData.institution_type)?.name || '‚Äî'
                            : '‚Äî'
                          }
                        </p>
                      </div>
                      <div>
                        <span className="text-sm font-medium text-gray-500">–í–æ–∑—Ä–∞—Å—Ç–Ω–∞—è –≥—Ä—É–ø–ø–∞:</span>
                        <p className="text-gray-900">{formData.age_group || '‚Äî'}</p>
                      </div>
                      <div>
                        <span className="text-sm font-medium text-gray-500">–¶–µ–Ω–æ–≤–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω:</span>
                        <p className="text-gray-900">{formData.price_range || '‚Äî'}</p>
                      </div>
                    </div>
                  </div>

                  <div>
                    <h4 className="text-sm font-semibold text-gray-700 uppercase tracking-wide mb-3">
                      –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                    </h4>
                    <div className="space-y-3">
                      <div>
                        <span className="text-sm font-medium text-gray-500">–¢–µ–ª–µ—Ñ–æ–Ω:</span>
                        <p className="text-gray-900">{formData.contact_phone || '‚Äî'}</p>
                      </div>
                      <div>
                        <span className="text-sm font-medium text-gray-500">–í–µ–±-—Å–∞–π—Ç:</span>
                        <p className="text-gray-900">
                          {formData.website ? (
                            <a 
                              href={formData.website} 
                              target="_blank" 
                              rel="noopener noreferrer"
                              className="text-blue-600 hover:text-blue-800 underline break-all"
                            >
                              {formData.website}
                            </a>
                          ) : '‚Äî'}
                        </p>
                      </div>
                      <div>
                        <span className="text-sm font-medium text-gray-500">–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã:</span>
                        <p className="text-gray-900">
                          {formData.latitude && formData.longitude && formData.latitude !== 0 && formData.longitude !== 0
                            ? `${formData.latitude.toFixed(6)}, ${formData.longitude.toFixed(6)}`
                            : '‚Äî'
                          }
                        </p>
                      </div>
                      <div>
                        <span className="text-sm font-medium text-gray-500">–ú–µ–¥–∏–∞—Ñ–∞–π–ª—ã:</span>
                        <p className="text-gray-900">
                          {formData.media_files?.length || 0} —Ñ–∞–π–ª–æ–≤
                          {formData.media_files && formData.media_files.length > 0 && (
                            <span className="text-gray-500">
                              {' '}(üì∏ {formData.media_files.filter(f => f.media_type === 'photo').length}, 
                              üé• {formData.media_files.filter(f => f.media_type === 'video').length})
                            </span>
                          )}
                        </p>
                      </div>
                    </div>
                  </div>
                </div>

                {/* –û–ø–∏—Å–∞–Ω–∏–µ */}
                <div>
                  <h4 className="text-sm font-semibold text-gray-700 uppercase tracking-wide mb-3">
                    –û–ø–∏—Å–∞–Ω–∏–µ —É—á—Ä–µ–∂–¥–µ–Ω–∏—è
                  </h4>
                  <div className="bg-gray-50 rounded-lg p-4">
                    <p className="text-gray-900 whitespace-pre-wrap leading-relaxed">
                      {formData.description || '‚Äî'}
                    </p>
                    <div className="mt-2 text-xs text-gray-500">
                      {formData.description.length} —Å–∏–º–≤–æ–ª–æ–≤
                    </div>
                  </div>
                </div>

                {/* –ê–¥—Ä–µ—Å */}
                <div>
                  <h4 className="text-sm font-semibold text-gray-700 uppercase tracking-wide mb-3">
                    –ê–¥—Ä–µ—Å
                  </h4>
                  <div className="bg-gray-50 rounded-lg p-4">
                    <p className="text-gray-900 leading-relaxed">
                      {formData.address || '‚Äî'}
                    </p>
                  </div>
                </div>

                {/* –£—Å–ª—É–≥–∏ */}
                <div>
                  <h4 className="text-sm font-semibold text-gray-700 uppercase tracking-wide mb-3">
                    –£—Å–ª—É–≥–∏ –∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã ({formData.services?.length || 0})
                  </h4>
                  {formData.services && formData.services.length > 0 ? (
                    <div className="flex flex-wrap gap-2">
                      {formData.services.map((service, index) => (
                        <span
                          key={index}
                          className="inline-flex items-center px-3 py-1 rounded-full text-sm bg-green-100 text-green-800"
                        >
                          {service}
                        </span>
                      ))}
                    </div>
                  ) : (
                    <p className="text-gray-500 italic">–£—Å–ª—É–≥–∏ –Ω–µ —É–∫–∞–∑–∞–Ω—ã</p>
                  )}
                </div>

                {/* –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ */}
                <div>
                  <h4 className="text-sm font-semibold text-gray-700 uppercase tracking-wide mb-3">
                    –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã –∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
                  </h4>
                  <div className="bg-gray-50 rounded-lg p-4">
                    <p className="text-gray-900 whitespace-pre-wrap leading-relaxed">
                      {formData.schedule || '‚Äî'}
                    </p>
                  </div>
                </div>

                {/* –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏ */}
                <div>
                  <h4 className="text-sm font-semibold text-gray-700 uppercase tracking-wide mb-3">
                    –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏
                  </h4>
                  <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                    {[
                      { key: 'instagram', name: 'Instagram', icon: 'üì∏', color: 'pink' },
                      { key: 'facebook', name: 'Facebook', icon: 'üìò', color: 'blue' },
                      { key: 'telegram', name: 'Telegram', icon: 'üí¨', color: 'sky' }
                    ].map(({ key, name, icon, color }) => (
                      <div key={key} className="flex items-center space-x-3">
                        <span className="text-2xl">{icon}</span>
                        <div className="flex-1 min-w-0">
                          <p className="text-sm font-medium text-gray-700">{name}</p>
                          {formData.social_links?.[key as keyof typeof formData.social_links] ? (
                            <a
                              href={formData.social_links[key as keyof typeof formData.social_links]}
                              target="_blank"
                              rel="noopener noreferrer"
                              className={`text-sm text-blue-600 hover:text-blue-800 underline truncate block`}
                            >
                              {formData.social_links[key as keyof typeof formData.social_links]}
                            </a>
                          ) : (
                            <p className="text-sm text-gray-500">–ù–µ —É–∫–∞–∑–∞–Ω</p>
                          )}
                        </div>
                      </div>
                    ))}
                  </div>
                </div>

                {/* –ü—Ä–µ–≤—å—é –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤ */}
                {formData.media_files && formData.media_files.length > 0 && (
                  <div>
                    <h4 className="text-sm font-semibold text-gray-700 uppercase tracking-wide mb-3">
                      –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã ({formData.media_files.length})
                    </h4>
                    <div className="grid grid-cols-3 md:grid-cols-4 lg:grid-cols-5 gap-3">
                      {formData.media_files.map((file, index) => (
                        <div key={index} className="relative aspect-square bg-gray-100 rounded-lg overflow-hidden">
                          {file.media_type === 'photo' ? (
                            <img
                              src={file.preview || (typeof file.file === 'string' ? file.file : URL.createObjectURL(file.file as File))}
                              alt={file.caption || `–§–æ—Ç–æ ${index + 1}`}
                              className="w-full h-full object-cover"
                              onError={(e) => {
                                e.currentTarget.style.display = 'none'
                              }}
                            />
                          ) : (
                            <video
                              src={file.preview || (typeof file.file === 'string' ? file.file : URL.createObjectURL(file.file as File))}
                              className="w-full h-full object-cover"
                              muted
                              preload="metadata"
                              onError={(e) => {
                                e.currentTarget.style.display = 'none'
                              }}
                            />
                          )}
                          <div className="absolute bottom-1 left-1">
                            <span className="bg-black bg-opacity-50 text-white px-1 text-xs rounded">
                              {file.media_type === 'photo' ? 'üì∏' : 'üé•'}
                            </span>
                          </div>
                          {file.caption && (
                            <div className="absolute bottom-1 right-1">
                              <span className="bg-black bg-opacity-50 text-white px-1 text-xs rounded" title={file.caption}>
                                üí¨
                              </span>
                            </div>
                          )}
                        </div>
                      ))}
                    </div>
                  </div>
                )}
              </div>
            </div>

            {/* –°—Ç–∞—Ç—É—Å –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ */}
            <div className="bg-green-50 border border-green-200 rounded-lg p-6">
              <div className="flex items-start">
                <div className="flex-shrink-0">
                  <svg className="w-6 h-6 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
                  </svg>
                </div>
                <div className="ml-4">
                  <h3 className="text-lg font-semibold text-green-900 mb-2">
                    –ì–æ—Ç–æ–≤–æ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ
                  </h3>
                  <p className="text-green-800 text-sm">
                    –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã —É—á–ª–∏ –≤—Å–µ –∑–∞–º–µ—á–∞–Ω–∏—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞. –ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–∫–∞ –±—É–¥–µ—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ.
                  </p>
                </div>
              </div>
            </div>

            {/* –û—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ */}
            {errors.media_upload && (
              <div className="bg-red-50 border border-red-200 rounded-lg p-4">
                <div className="flex items-start">
                  <div className="flex-shrink-0">
                    <svg className="w-5 h-5 text-red-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                    </svg>
                  </div>
                  <div className="ml-3">
                    <h4 className="text-sm font-medium text-red-800">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤</h4>
                    <p className="text-sm text-red-600 mt-1">{errors.media_upload}</p>
                  </div>
                </div>
              </div>
            )}

            {errors.submit && (
              <div className="bg-red-50 border border-red-200 rounded-lg p-4">
                <div className="flex items-start">
                  <div className="flex-shrink-0">
                    <svg className="w-5 h-5 text-red-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z" />
                    </svg>
                  </div>
                  <div className="ml-3">
                    <p className="text-sm font-medium text-red-800">–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ</p>
                    <p className="text-sm text-red-600 mt-1">{errors.submit}</p>
                  </div>
                </div>
              </div>
            )}

            {/* –î—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ */}
            {Object.entries(errors).filter(([key]) => !['media_upload', 'submit'].includes(key)).length > 0 && (
              <div className="bg-red-50 border border-red-200 rounded-lg p-4">
                <div className="flex items-start">
                  <div className="flex-shrink-0">
                    <svg className="w-5 h-5 text-red-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                    </svg>
                  </div>
                  <div className="ml-3">
                    <h4 className="text-sm font-medium text-red-800">–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–∫–∏</h4>
                    <ul className="text-sm text-red-600 mt-1 list-disc list-inside">
                      {Object.entries(errors)
                        .filter(([key]) => !['media_upload', 'submit'].includes(key))
                        .map(([key, error]) => (
                          <li key={key}>{error}</li>
                        ))}
                    </ul>
                  </div>
                </div>
              </div>
            )}
          </div>
        )

      default:
        return null
    }
  }

  return (
    <div className="min-h-screen bg-gray-50">
      <div className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
        <div className="text-center mb-8">
          <h1 className="text-3xl font-bold text-gray-900 mb-4">
            –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏
          </h1>
          <p className="text-gray-600 max-w-2xl mx-auto">
            –í–Ω–µ—Å–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ–≥–ª–∞—Å–Ω–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—é –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∑–∞—è–≤–∫—É –Ω–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ.
          </p>
        </div>

        {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —à–∞–≥–æ–≤ */}
        <div className="mb-8">
          <nav aria-label="Progress">
            <ol className="flex items-center justify-between">
              {steps.map((step, index) => (
                <li key={step.id} className={`relative ${index < steps.length - 1 ? 'pr-8 sm:pr-20' : ''}`}>
                  <div className="flex items-center">
                    <div className={`flex items-center justify-center w-12 h-12 rounded-full border-2 ${
                      currentStep === step.id
                        ? 'border-blue-600 bg-blue-600 text-white'
                        : currentStep > step.id
                        ? 'border-green-600 bg-green-600 text-white'
                        : 'border-gray-300 bg-white text-gray-500'
                    }`}>
                      {currentStep > step.id ? (
                        <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
                        </svg>
                      ) : (
                        <span className="text-lg">{step.icon}</span>
                      )}
                    </div>
                    <span className={`ml-4 text-sm font-medium ${
                      currentStep === step.id ? 'text-blue-600' : 'text-gray-500'
                    }`}>
                      {step.name}
                    </span>
                  </div>
                  {index < steps.length - 1 && (
                    <div className="absolute top-6 left-6 -ml-px mt-0.5 h-0.5 w-8 sm:w-20 bg-gray-300" />
                  )}
                </li>
              ))}
            </ol>
          </nav>
        </div>

        {/* –§–æ—Ä–º–∞ */}
        <div className="bg-white shadow-lg rounded-lg overflow-hidden">
          <div className="px-6 py-8">
            {renderStep()}
          </div>

          {/* –ù–∞–≤–∏–≥–∞—Ü–∏—è */}
          <div className="px-6 py-4 bg-gray-50 border-t border-gray-200 flex justify-between">
            <button
              type="button"
              onClick={handlePrev}
              disabled={currentStep === 1}
              className={`px-6 py-2 rounded-lg font-medium transition-colors ${
                currentStep === 1
                  ? 'bg-gray-100 text-gray-400 cursor-not-allowed'
                  : 'bg-gray-200 hover:bg-gray-300 text-gray-700'
              }`}
            >
              ‚Üê –ù–∞–∑–∞–¥
            </button>

            {currentStep < 4 ? (
              <button
                type="button"
                onClick={handleNext}
                className="px-6 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded-lg font-medium transition-colors"
              >
                –î–∞–ª–µ–µ ‚Üí
              </button>
            ) : (
              <button
                type="button"
                onClick={handleSubmit}
                disabled={isSubmitting}
                className="px-6 py-2 bg-green-600 hover:bg-green-700 disabled:bg-gray-400 text-white rounded-lg font-medium transition-colors flex items-center"
              >
                {isSubmitting ? (
                  <>
                    <LoadingSpinner size="sm" className="mr-2" />
                    –û—Ç–ø—Ä–∞–≤–∫–∞...
                  </>
                ) : (
                  '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ'
                )}
              </button>
            )}
          </div>
        </div>

        {/* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
        <div className="mt-8 bg-blue-50 border border-blue-200 rounded-lg p-6">
          <div className="flex">
            <div className="flex-shrink-0">
              <svg className="w-6 h-6 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
              </svg>
            </div>
            <div className="ml-3">
              <h3 className="text-sm font-medium text-blue-800">
                –í–∞–∂–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
              </h3>
              <div className="mt-2 text-sm text-blue-700">
                <ul className="list-disc pl-5 space-y-1">
                  <li>–í–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ—á–∏—Ç–∞–π—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–º —à–∞–≥–µ</li>
                  <li>–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ</li>
                  <li>–ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–∫–∞ –ø–æ–ª—É—á–∏—Ç —Å—Ç–∞—Ç—É—Å "–ù–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏"</li>
                  <li>–ü—Ä–æ—Ü–µ—Å—Å —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ 3 —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π</li>
                </ul>
              </div>
            </div>
          </div>
        </div>

        {/* –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ */}
        <div className="mt-6 text-center">
          <Link
            to="/my-submissions"
            className="inline-flex items-center text-gray-600 hover:text-gray-900 transition-colors"
          >
            ‚Üê –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –º–æ–∏–º –∑–∞—è–≤–∫–∞–º
          </Link>
        </div>
      </div>
    </div>
  )
}

export default EditSubmissionPage